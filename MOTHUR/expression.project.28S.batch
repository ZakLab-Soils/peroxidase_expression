#mothur pipeline for analysis of fungal 28S rRNA genes using cDNA template
#created by Zac Freedman, Nov, 2014 for the Zak Lab and modified by Will Argiroff, June, 2017 - keep a '#' infront of a command or note for mothur to ignore it
#
#Step 1: Extract fasta and qual files from the fastq output from SeqCore
#
#fastq.info(fastq=SMRT1.28S.CCS.5x.fastq, fasta=t, qfile=t, pacbio=t)
#fastq.info(fastq=SMRT2.28S.CCS.5x.fastq, fasta=t, qfile=t, pacbio=t)
#fastq.info(fastq=SMRT3.28S.CCS.5x.fastq, fasta=t, qfile=t, pacbio=t)
#
#Step 2: Splitting the fasta file by barcode (oligos file) and removing low quality sequences
#
#trim.seqs(fasta=SMRT1.28S.CCS.5x.fasta, oligos=SMRT1.28S.paired.oligos, qfile=SMRT1.28S.CCS.5x.qual, checkorient=t, qwindowaverage=30, qwindowsize=50, maxambig=1, maxhomop=8, bdiffs=1, pdiffs=1, processors=4)
#trim.seqs(fasta=SMRT2.28S.CCS.5x.fasta, oligos=SMRT2.28S.paired.oligos, qfile=SMRT2.28S.CCS.5x.qual, checkorient=t, qwindowaverage=30, qwindowsize=50, maxambig=1, maxhomop=8, bdiffs=1, pdiffs=1, processors=4)
#trim.seqs(fasta=SMRT3.28S.CCS.5x.fasta, oligos=SMRT3.28S.paired.oligos, qfile=SMRT3.28S.CCS.5x.qual, checkorient=t, qwindowaverage=30, qwindowsize=50, maxambig=1, maxhomop=8, bdiffs=1, pdiffs=1, processors=4)
#
#Step 2: Merge all of the files to create one fasta, qual, and groups files for analysis
#
#merge.files(input=SMRT1.28S.CCS.5x.trim.fasta-SMRT2.28S.CCS.5x.trim.fasta-SMRT3.28S.CCS.5x.trim.fasta, output=combined.28S.fasta)
#merge.files(input=SMRT1.28S.CCS.5x.trim.qual-SMRT2.28S.CCS.5x.trim.qual-SMRT3.28S.CCS.5x.trim.qual, output=combined.28S.qual)
#merge.files(input=SMRT1.28S.CCS.5x.groups-SMRT2.28S.CCS.5x.groups-SMRT3.28S.CCS.5x.groups, output=combined.28S.groups)
#
#Step 3: See how many sequences you have per group, as well as the total number of sequences remaining in the dataset
#
#count.groups(group=combined.28S.groups)
#summary.seqs(fasta=combined.28S.fasta, processors=4)
#
#Step 4: now that you have all of the sequences together in one place, it's time to remove erroneous sequences (unknown taxonomy, ambiguous length, or chimeric)
#make sure to align the RDP reference set off the mothur website before continuing
#
#unique.seqs(fasta=combined.28S.fasta)
#count.seqs(name=current, group=combined.28S.groups)
#align.seqs(candidate=current, template=fungal.LSU.train.clustal.align.fasta, flip=t, processors=4)
#summary.seqs(fasta=current, count=current, processors=4)
#For screen.seqs, let mothur optimize sequence criteria at 90% threshold
#screen.seqs(fasta=current, count=current, optimize=start-end-minlength-maxlength, criteria=90, processors=4)
#summary.seqs(fasta=current, count=current, processors=4)
#filter.seqs(fasta=current, vertical=T, processors=4)
#Run unique.seqs after filter.seqs to compress duplicate sequences that may have results after the filter step
#unique.seqs(fasta=current, count=current)
#summary.seqs(fasta=current, count=current, processors=4)
#pre.cluster(fasta=current, count=current)
#summary.seqs(fasta=current, count=current, processors=4)
#chimera.uchime(fasta=current, count=current, dereplicate=T, processors=4)	
#remove.seqs(accnos=current, fasta=current, count=current, dups=f)
#classify.seqs(fasta=current, count=current, template=fungal.LSU.train.clustal.align.fasta, taxonomy=FungiLSU_train_1400bp_8506_mod.tax, cutoff=80, processors=4)
#remove.lineage(fasta=current, count=current, taxonomy=current, taxon=Mitochondria-Chloroplast-Archaea-Bacteria-unknown)
#summary.seqs(fasta=current, count=current)
#
#Step 5: At this point, the dataset contains only high quality fungal sequences. Now we must cluster OTUs, starting with calculation of a distance matrix. I used the cluster.split command. For information on the cluster.split pros/cons, check the mothur wiki.
#
#dist.seqs(fasta=combined.28S.unique.good.filter.unique.precluster.pick.pick.fasta, cutoff=0.2, countends=t, processors=4)
#cluster.split(column=combined.28S.unique.good.filter.unique.precluster.pick.pick.dist, count=combined.28S.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.pick.count_table, method=average, processors=4, cutoff=0.15, large=T)
#cluster.split(column=cDNA.28S.combined.unique.good.filter.unique.precluster.pick.pick.dist, count=cDNA.28S.combined.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.pick.count_table, processors=4, cutoff=0.15)
#
#Step 6. Make OTU tables at 99% sequence similarity cutoff
#OTU table
make.shared(list=combined.28S.unique.good.filter.unique.precluster.pick.pick.an.unique_list.list, count=combined.28S.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.pick.count_table, label=0.01)
#                 combined.28S.unique.good.filter.unique.precluster.pick.pick.an.unique_list.list        combined.28S.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.pick.count_table
#
#Get representative sequences
#get.oturep(column=combined.28S.unique.good.filter.unique.precluster.pick.pick.dist, list=combined.28S.unique.good.filter.unique.precluster.pick.pick.an.unique_list.list, fasta=combined.28S.unique.good.filter.unique.precluster.pick.pick.fasta, count=combined.28S.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.pick.count_table, method=distance, cutoff=0.03, label=0.01, large=true)
#
#Degap representative sequence fasta
#degap.seqs(fasta=combined.28S.unique.good.filter.unique.precluster.pick.pick.an.unique_list.0.01.rep.fasta)
#